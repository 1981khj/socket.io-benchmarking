% Does graphing and analysis on data generated by the client tester. 

data = importdata('data.log', ',', 0);

% Sort by concurrency level, then messages per second. It comes out a
% little wonky from Java beacuse it's stored as a map.
data = sortrows(data, [1, 2]);

% now we want to make a graph that charts
concurrencyLevels = unique(data(:, 1))

subplot(2, 2, 1);

for concurrency = concurrencyLevels'
    % get all the data for that concurrency level
    concurrency
    results = data(find(data(:, 1)==concurrency), :);
    
    semilogy(results(:, 2), results(:, 5));
    
    hold on
end

xlabel('messages sent per second');
ylabel('mean roundtrip time');


subplot(2, 2, 2);
for concurrency = concurrencyLevels'
    % get all the data for that concurrency level
    concurrency
    results = data(find(data(:, 1)==concurrency), :);
    
    semilogy(results(:, 2).*results(:, 1), results(:, 5));
    
    hold on
end

xlabel('messages received per second');
ylabel('mean roundtrip time');



subplot(2, 2, 3);
for concurrency = concurrencyLevels'
    % get all the data for that concurrency level
    concurrency
    results = data(find(data(:, 1)==concurrency), :);
    
    plot(results(:, 2), results(:, 5));
    
    hold on
end

xlabel('messages sent per second');
ylabel('mean roundtrip time');



subplot(2, 2, 4);
for concurrency = concurrencyLevels'
    % get all the data for that concurrency level
    concurrency
    results = data(find(data(:, 1)==concurrency), :);
    
    plot(results(:, 2).*results(:, 1), results(:, 5));
    
    hold on
end

xlabel('messages received per second');
ylabel('mean roundtrip time');

